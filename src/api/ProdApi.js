/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Prod from '../model/Prod';

/**
* Prod service.
* @module api/ProdApi
* @version 1.0.0
*/
export default class ProdApi {

    /**
    * Constructs a new ProdApi. 
    * @alias module:api/ProdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createprod operation.
     * @callback module:api/ProdApi~createprodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Prod} prod data to be created
     * @param {module:api/ProdApi~createprodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prod}
     */
    createprod(prod, callback) {
      let postBody = prod;
      // verify the required parameter 'prod' is set
      if (prod === undefined || prod === null) {
        throw new Error("Missing the required parameter 'prod' when calling createprod");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prod;
      return this.apiClient.callApi(
        '/prod', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteprod operation.
     * @callback module:api/ProdApi~deleteprodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} prodId the Id parameter
     * @param {module:api/ProdApi~deleteprodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteprod(prodId, callback) {
      let postBody = null;
      // verify the required parameter 'prodId' is set
      if (prodId === undefined || prodId === null) {
        throw new Error("Missing the required parameter 'prodId' when calling deleteprod");
      }

      let pathParams = {
        'prodId': prodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/prod/{prodId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllprod operation.
     * @callback module:api/ProdApi~getAllprodCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Prod>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/ProdApi~getAllprodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Prod>}
     */
    getAllprod(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Prod];
      return this.apiClient.callApi(
        '/prod/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getprod operation.
     * @callback module:api/ProdApi~getprodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} prodId the Id parameter
     * @param {module:api/ProdApi~getprodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prod}
     */
    getprod(prodId, callback) {
      let postBody = null;
      // verify the required parameter 'prodId' is set
      if (prodId === undefined || prodId === null) {
        throw new Error("Missing the required parameter 'prodId' when calling getprod");
      }

      let pathParams = {
        'prodId': prodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prod;
      return this.apiClient.callApi(
        '/prod/{prodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateprod operation.
     * @callback module:api/ProdApi~updateprodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} prodId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Prod} opts.prod data to be updated
     * @param {module:api/ProdApi~updateprodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prod}
     */
    updateprod(prodId, opts, callback) {
      opts = opts || {};
      let postBody = opts['prod'];
      // verify the required parameter 'prodId' is set
      if (prodId === undefined || prodId === null) {
        throw new Error("Missing the required parameter 'prodId' when calling updateprod");
      }

      let pathParams = {
        'prodId': prodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prod;
      return this.apiClient.callApi(
        '/prod/{prodId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
